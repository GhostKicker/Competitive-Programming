struct line
{
    int k, b;
    line(int k = 0, int b = INF) :k(k), b(b) {}
    int operator[](int a) { return a*k + b; }
};
struct li_chao
{
    static const int maxn = 100 * 1000 + 4;
    vi x;
    vector<line> tr;
    int n = 1;
    li_chao() {}
    li_chao(vector<int>& x) :x(x) { tr.assign(4 * maxn, line()); }
    void set(line nl, int v = 1, int l = 0, int r = maxn)
    {
        r = min(r, sz(x) - 1);
        int m = (l + r) / 2;
        bool left = nl[x[l]] < tr[v][x[l]];
        bool mid = nl[x[m]] < tr[v][x[m]];
        bool right = nl[x[r]] < tr[v][x[r]];
        if (mid) swap(nl, tr[v]);
        if (r - l == 1) return;
        if (left != mid) set(nl, v + v, l, m);
        if (right != mid) set(nl, v + v + 1, m, r);

    }
    int get(int p, int v = 1, int l = 0, int r = maxn)
    {
        r = min(r, sz(x) - 1);
        int m = (l + r) / 2;
        if (r - l == 1) return tr[v][x[p]];
        if (p < m) return min(tr[v][x[p]], get(p, v + v, l, m));
        else return min(tr[v][x[p]], get(p, v + v + 1, m, r));
    }
};
