
struct coolstree
{
    int n = 1;
    vi t;
    vi mod;
    coolstree() {};
    coolstree(vi& ar)
    {
        for (; n < ar.sz; n <<= 1) {}
        t.resize(n<<1, 0);
        mod.resize(n<<1, 0);
        for (int i = 0; i < ar.size(); i++) t[i + n] = ar[i];
        for (int i = n - 1; i > 0; --i) t[i] = min(t[2 * i], t[2 * i + 1]);
    }
    void push(int v)
    {
        t[v] += mod[v];
        if (v < n)
        {
            mod[v << 1 | 1] += mod[v];
            mod[v << 1] += mod[v];
        }
        mod[v] = 0;
    }

    void set(ll v, ll tl, ll tr, ll l, ll r, ll x)
    {
        push(v);

        if (tl == l && tr == r)
        {
            mod[v] += x;
            return;
        }

        ll m = (tl + tr) / 2;

        if (r <= m) set(v<<1, tl, m, l, r, x);
        else if (l >= m) set(v<<1|1, m, tr, l, r, x);
        else
        {
            set(2 * v, tl, m, l, m, x);
            set(2 * v + 1, m, tr, m, r, x);
        }

        push(2 * v);
        push(2 * v + 1);
        t[v] = min(t[2 * v], t[2 * v + 1]);
    }

    ll get(ll v, ll tl, ll tr, ll l, ll r)
    {
        push(v);

        if (tl == l && tr == r)
            return t[v];

        ll m = (tl + tr) / 2;

        if (r <= m)
            return get(2 * v, tl, m, l, r);
        else if (l >= m)
            return get(2 * v + 1, m, tr, l, r);
        else
        {
            ll ans = inf;
            ans = min(ans, get(2 * v, tl, m, l, m));
            ans = min(ans, get(2 * v + 1, m, tr, m, r));
            return ans;
        }

    }

    ll get(ll l, ll r) { return get(1, 0, n, l, r+1); }
    ll get(ll what) { return get(what, what + 1); }
    void set(ll l, ll r, ll x) { set(1, 0, n, l, r+1, x); }
    void set(ll what, ll x) { set(what, what + 1, x); }
};

