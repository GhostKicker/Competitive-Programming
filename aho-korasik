#include <bits/stdc++.h>
//#define int ll
#define all(x) begin(x), end(x)
#define OUT(x) ((cout << x), exit(0))
using namespace std;
typedef long double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
const db eps = 1e-9;
const db pi = acos(-1.0);
const db dinf = 1e250;
const ll INF = (ll)(2e18);
const int inf = (int)(1e9 + 7);
//------------------------------------------//


struct korasik
{
    struct node
    {
        char c = '!';
        int p = -1;
        int link = -1;
        int leaf = 0;
        map<char, int> son;
        map<char, int> go;
        node() {}
        node(int p, char c) :p(p), c(c) {}
    };
    vector<node> t;
    korasik()
    {
        t.push_back(node()); 
    }

    void add(string& s)
    {
        int v = 0;
        for (auto& c : s)
        {
            if (!t[v].son.count(c))
            {
                t[v].son[c] = t.size();
                t.push_back(node(v, c));
            }
            v = t[v].son[c];
        }
        t[v].leaf = s.size();
    }

    int getSuffLink(int v)
    {
        if (t[v].link != -1) return t[v].link;
        if (v == 0 || t[v].p == 0) return t[v].link = 0;
        return t[v].link = getLink(getSuffLink(t[v].p), t[v].c);
    }

    int getLink(int v, char c)
    {
        if (t[v].go.count(c)) return t[v].go[c];
        if (t[v].son.count(c)) return t[v].go[c] = t[v].son[c];
        if (v == 0) return t[v].go[c] = 0;
        return t[v].go[c] = getLink(getSuffLink(v), c);
    }

    void init()
    {
        queue<int>q;
        q.push(0);

        while (q.size())
        {
            int v = q.front();
            q.pop();
            getSuffLink(v);
            for (auto& it : t[v].son)
                q.push(it.second);
        }
    }

};

mt19937 rng(time(0));
vector<string> words;
vector<string> qs;
pii res(inf, inf);
void solve(int l, int r)
{
    bool good = true;
    korasik k;
    k = korasik();
    for (int i = l; i < r; ++i) k.add(words[i]);
    k.init();
    for (int i = 0; i < qs.size() && good; ++i)
    {
        int v = 0;
        for (int j = 0; j < qs[i].size(); ++j)
        {
            v = k.getLink(v, qs[i][j]);
            if (k.t[v].leaf)
            {
                res = min(res, { i + 1, j + 2 - k.t[v].leaf });
                good = false;
                break;
            }
        }
    }
}

int32_t main()
{
    ios_base::sync_with_stdio(0);
    cout << fixed << setprecision(10);
    cin.tie(0);

#ifdef _MY
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    korasik k;
    int n;
    cin >> n;
    string s;
    getline(cin, s);


    for (int i = 0; i < n; ++i)
    {
        getline(cin, s);
        words.push_back(s);
    }

    shuffle(all(words), rng);

    int q;
    cin >> q;
    getline(cin, s);
    for (int i = 0; i < q; ++i)
    {
        getline(cin, s);
        qs.push_back(s);
    }

    solve(0 * n / 5, 1 * n / 5);
    solve(1 * n / 5, 2 * n / 5);
    solve(2 * n / 5, 3 * n / 5);
    solve(3 * n / 5, 4 * n / 5);
    solve(4 * n / 5, 5 * n / 5);

    if (res != pii(inf, inf))
    {
        cout << res.first << " ";
        cout << res.second;
        return 0;
    }

    OUT("Passed");

    return 0;
}