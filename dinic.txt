
struct edge
{
    int from;
    int to;
    int cap;
    int flow;
    int index;
    edge() {};
    edge(int from, int to, int cap, int flow, int index)
        :from(from)
        , to(to)
        , cap(cap)
        , flow(flow)
        , index(index)
    {};
};



int n;
int m;
vector<edge> E;
int s;
int t;
vvi g;
vector<int> used;
vi d;

bool bfs(int s)
{
    d.assign(n, inf);
    d[s] = 0;
    queue<int> q;
    q.push(s);

    while (!q.empty())
    {
        int curv = q.front();
        q.pop();

        for (auto e : g[curv])
        {
            if (d[E[e].to] == inf && E[e].cap != E[e].flow)
            {
                q.push(E[e].to);
                d[E[e].to] = d[curv] + 1;
            }
        }
    }
    if (d[t] == inf) return false;
    return true;
}

int dfs(int v, int flow)
{
    if (v == t) return flow;
    for (; used[v] < g[v].size(); ++used[v])
    {
        int e = g[v][used[v]];

        if (d[v] == d[E[e].to] - 1 && E[e].flow < E[e].cap)
        {
            int f1 = dfs(E[e].to, min(flow, E[e].cap - E[e].flow));
            if (f1 != 0)
            {
                E[e].flow += f1;
                E[e ^ 1].flow -= f1;
                return f1;
            }
        }
    }
    return 0;
}

int Dinic()
{
	vert = g.sz;
    int res = 0;
    while (1)
    {
        if (!bfs(s)) return res;

        while (1)
        {
            used.assign(n, 0);
            int f = dfs(s, inf);
            res += f;
            if (!f) break;
        }
    }
}


void add_edge(int from, int to, int cap)
{
    g[from].pb(E.sz);
    E.pb(edge(from, to, cap, 0, E.sz));
    g[to].pb(E.sz);
    E.pb(edge(to, from, 0, 0, E.sz));
}
